<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com">
	
	<!-- 권한조회 -->
	<select id="S_COMM_AUTH_GROUP" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_AUTH_GROUP */
		SELECT 'id_' || (ROWNUM-1) AS "id"
	         , A.COMM_AUTH_GROUP_ID
			 , A.GROUP_NANE
			 , A.DESCRIPTION
      	  FROM COMM_AUTH_GROUP A
      	 ORDER BY A.GROUP_NANE ASC
	</select>
	<!-- 권한 사용자 조회 -->
	<select id="S_COMM_AUTH_GROUP_USER" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_AUTH_GROUP_USER */
		SELECT 'id_' || (ROWNUM-1) AS "id"
	         , A.COMM_AUTH_GROUP_USER_ID
			 , A.COMM_AUTH_GROUP_ID
			 , A.COMM_USER_ID
			 , A.DESCRIPTION
      	  FROM COMM_AUTH_GROUP_USER A
      	  JOIN COMM_USER B ON A.COMM_USER_ID = B.COMM_USER_ID
      	 WHERE A.COMM_AUTH_GROUP_ID = #{COMM_AUTH_GROUP_ID}
      	   AND B.USE_YN = '1'
      	 ORDER BY B.USER_NAME ASC
	</select>
	
	<!-- 메뉴등록(기능조회) -->
	<select id="S_COMM_MENU_FUNC" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_MENU_FUNC */
		SELECT 'id_' || (ROWNUM-1) AS "id"
	         , A.COMM_MENU_FUNC_ID
	         , A.COMM_MENU_ID
	         , A.COMM_FUNCTION_ID
	         , A.DESCRIPTION
	         , A.SEQ
	         , A.USE_YN
      	  FROM COMM_MENU_FUNC A
      	 WHERE A.COMM_MENU_ID = #{COMM_MENU_ID}
      	   AND A.USE_YN = '1'
      	 ORDER BY A.SEQ ASC
	</select>
	
	<!-- 메뉴에 추가/삭제 -->
	<update id="U_COMM_MENU_FUNC" parameterType="HashMap" >
		/* U_COMM_MENU_FUNC */
		MERGE INTO COMM_MENU_FUNC
       		 USING DUAL
        		ON (COMM_MENU_ID = #{COMM_MENU_ID} 
        		AND COMM_FUNCTION_ID = #{COMM_FUNCTION_ID}
        		)
       		  WHEN MATCHED THEN
       		UPDATE SET USE_YN = #{USE_YN}
       				 , MID = #{MID}
       				 , MDT = SYSDATE
       				 , MIP = #{MIP}
       		WHEN NOT MATCHED THEN
		       INSERT(COMM_MENU_FUNC_ID
		          , COMM_MENU_ID
		          , COMM_FUNCTION_ID
		          , USE_YN
		          , DESCRIPTION
		          <include refid="config.cidColumn"></include>
		          )
		       VALUES(COMM_MENU_FUNC_S.NEXTVAL
		          , #{COMM_MENU_ID}
		          , #{COMM_FUNCTION_ID}
		          , #{USE_YN}
		          , #{DESCRIPTION}
		          , #{MID}
		          , SYSDATE
		          , #{MIP}
		          , #{MID}
		          , SYSDATE    
		          , #{MIP})
	</update>
	
	<!-- 기능 별 메뉴조회 -->
	<select id="S_COMM_FUNCTION_MENU" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_FUNCTION_MENU */
		SELECT 'id_' || (ROWNUM-1) AS "id"
	         , LEVEL-1 AS "indent"
	         , SUBSTR( SYS_CONNECT_BY_PATH(ROWNUM, '_')
	           , (INSTR(SYS_CONNECT_BY_PATH(ROWNUM, '_'), '_', -1, 2)+1)
	           , (INSTR(SYS_CONNECT_BY_PATH(ROWNUM, '_'), '_', -1) - (INSTR(SYS_CONNECT_BY_PATH(ROWNUM, '_'), '_', -1, 2)+1)) ) -1  AS "parent"
	         , #{COMM_FUNCTION_ID}							AS COMM_FUNCTION_ID
	         , A.COMM_MENU_ID 								AS COMM_MENU_ID
	         , COMM_UTIL_PKG.lang(A.MLG_CODE, #{LANG_CODE}) AS MENU_NAME
	         , NVL(B.USE_YN, '0') 							AS USE_YN
      	  FROM COMM_MENU A
	 LEFT JOIN COMM_MENU_FUNC B ON A.COMM_MENU_ID = B.COMM_MENU_ID AND B.COMM_FUNCTION_ID = #{COMM_FUNCTION_ID}
	     START WITH A.UP_MENU_CODE IS null 
	    CONNECT BY PRIOR A.MENU_CODE = A.UP_MENU_CODE
	    ORDER SIBLINGS BY A.SEQ
	</select>
	<!-- 기능관리(기능 조회) -->
	<select id="S_COMM_FUNCTION" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_FUNCTION */
		SELECT 'id_' || (ROWNUM-1) AS "id"
			 , A.COMM_FUNCTION_ID 
			 , A.FUNCTION_CODE    
			 , A.MLG_CODE
			 , A.DESCRIPTION      
			 , A.ATTRIBUTE1       
			 , A.ATTRIBUTE2       
			 , A.ATTRIBUTE3       
			 , A.ATTRIBUTE4       
			 , A.ATTRIBUTE5       
			 , A.ATTRIBUTE6       
			 , A.ATTRIBUTE7       
			 , A.ATTRIBUTE8       
			 , A.ATTRIBUTE9       
			 , A.ATTRIBUTE10      
		  FROM COMM_FUNCTION A
		 WHERE A.COMM_FUNCTION_ID = A.COMM_FUNCTION_ID
		 <if test="@prjb.com.util.ComUtil@nvl(p_functionCode, '') != ''">
		 	<![CDATA[
		 	AND ( instr(A.FUNCTION_CODE, #{p_functionCode}) > 0 OR instr(COMM_UTIL_PKG.lang(A.MLG_CODE, #{LANG_CODE}), #{p_functionCode}) > 0 )
		 	]]> 
		 </if>		 
		 ORDER BY A.MLG_CODE ASC
	</select>
	
	<!-- 최근사용메뉴 조회 -->
	<select id="S_LAST_MENU_OPEN_LIST" resultType="HashMap" parameterType="HashMap" >
		/* S_LAST_MENU_OPEN_LIST */
		SELECT A.MENU_CODE
			 , A.MENU_URL
			 , A.OPEN_DATE
		  FROM (
				SELECT B.MENU_CODE	AS MENU_CODE
				     , B.MENU_URL	AS MENU_URL
				     , MAX(A.MDT) 	AS OPEN_DATE
				  FROM COMM_MENU_OPEN_HIST A
				  JOIN COMM_MENU B ON A.COMM_MENU_ID = B.COMM_MENU_ID
				 WHERE B.USE_YN = '1'
				   AND A.COMM_USER_ID = #{CID}
				 GROUP BY B.MENU_CODE, B.MENU_URL 
				 ORDER BY MAX(A.MDT) DESC
				 ) A
		 WHERE 1=1
		 <![CDATA[
		   AND ROWNUM < 10
		 ]]>
	</select>
	<!-- 즐겨찾기 조회 -->
	<select id="S_COMM_USER_BOOKMARK" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_USER_BOOKMARK */
		SELECT COMM_USER_BOOKMARK_ID
			 , MENU_CODE
			 , COMM_USER_ID
		  FROM COMM_USER_BOOKMARK
		 WHERE COMM_USER_ID = #{CID}
	</select>
	<!-- 즐겨찾기 추가/삭제 -->
	<insert id="P_COMM_USER_BOOKMARK" parameterType="HashMap" >
		/* P_COMM_USER_BOOKMARK */
		MERGE INTO COMM_USER_BOOKMARK
       		 USING DUAL
        		ON (MENU_CODE = #{MENU_CODE} AND COMM_USER_ID = #{CID})
       		  WHEN MATCHED THEN
       		UPDATE SET MID = MID
       		DELETE WHERE COMM_USER_ID = #{CID} AND MENU_CODE = #{MENU_CODE}
       		WHEN NOT MATCHED THEN
		       INSERT(COMM_USER_BOOKMARK_ID
		          , MENU_CODE
		          , COMM_USER_ID
		          <include refid="config.cidColumn"></include>
		          )
		       VALUES(COMM_USER_BOOKMARK_S.NEXTVAL
		          , #{MENU_CODE}
		          , #{CID}
		          , #{CID}
		          , SYSDATE
		          , #{CIP}
		          , #{CID}
		          , SYSDATE    
		          , #{CIP})
	</insert>
	<!-- 사용자별 메뉴오픈이력 저장 -->
	<insert id="I_COMM_MENU_OPEN_HIST" parameterType="HashMap" >
		/* I_COMM_MENU_OPEN_HIST */
		INSERT INTO COMM_MENU_OPEN_HIST(COMM_MENU_OPEN_HIST_ID
									  , COMM_MENU_ID
									  , COMM_USER_ID
									  <include refid="config.cidColumn"></include>
									  )
								 VALUES(COMM_MENU_OPEN_HIST_S.NEXTVAL
									  , #{COMM_MENU_ID}
									  , #{COMM_USER_ID}
									  , #{COMM_USER_ID}
									  , SYSDATE
									  , #{CIP}
									  , #{COMM_USER_ID}
									  , SYSDATE    
									  , #{CIP})
	</insert>
	<!-- 테이블리스트 조회 -->
	<select id="S_COMM_TABLE" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_TABLE */
		SELECT 'id_' || (ROWNUM-1) 	AS "id"
			 , A.TABLE_NAME 		AS TABLE_NAME
			 , B.COMMENTS			AS COMMENTS
			 , C.LAST_NUMBER		AS SEQ_CURRVAL 
		  FROM ALL_TABLES A
		  JOIN ALL_TAB_COMMENTS B ON A.TABLE_NAME = B.TABLE_NAME 
		  						 AND B.TABLE_TYPE = 'TABLE'
	 LEFT JOIN USER_SEQUENCES C ON A.TABLE_NAME || '_S' = C.SEQUENCE_NAME 
		 WHERE A.OWNER = 'PRJB'
		 <if test="@prjb.com.util.ComUtil@nvl(p_tableNm, '') != ''">
		 	<![CDATA[
		 	AND ( instr(A.TABLE_NAME, #{p_tableNm}) > 0 OR instr(B.COMMENTS, #{p_tableNm}) > 0 )
		 	]]>
		 </if>
		 ORDER BY A.TABLE_NAME ASC
	</select>
	<!-- 테이블 상세 조회 -->
	<select id="S_COMM_TABLE_DETAIL" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_TABLE_DETAIL */
		SELECT 'id_' || (ROWNUM-1) AS "id"
			 , A.TABLE_NAME
		     , A.COLUMN_NAME
		     , B.COMMENTS
		     , A.DATA_TYPE
		     , A.DATA_LENGTH
		     , CASE WHEN A.NULLABLE = 'Y'
		     		THEN '1'
		     		ELSE '0' END AS NULLABLE
		  FROM ALL_TAB_COLUMNS A
		  JOIN ALL_COL_COMMENTS B ON A.TABLE_NAME = B.TABLE_NAME 
		  						 AND A.COLUMN_NAME = B.COLUMN_NAME
		 WHERE A.TABLE_NAME = #{TABLE_NAME}
		 ORDER BY A.COLUMN_ID ASC
	</select>
	
	<!-- 다국어일괄등록 -->
	<insert id="P_MLG_BATCH_REGIST" parameterType="HashMap" >
		/* P_MLG_BATCH_REGIST */
		DECLARE
		BEGIN
		
			FOR CS IN (
						select A.${MLG_COLUMN} AS MLG_CODE
						  from ${TABLE_NAME} A
						 WHERE NOT EXISTS (
						                    SELECT COMM_MLG_ID
						                      FROM COMM_MLG Z
						                     WHERE Z.MLG_CODE = A.${MLG_COLUMN}
						                       AND Z.${COMPARE_COLUMN} = '1'
						                  )
						)
			LOOP
				
				MERGE INTO COMM_MLG A
					 USING DUAL B
					    ON (A.MLG_CODE = CS.MLG_CODE)
					  WHEN MATCHED THEN
					  UPDATE SET ${COMPARE_COLUMN} = '1'
					  		   , MID = #{MID}
					  		   , MDT = SYSDATE
					  		   , MIP = #{MIP}
					  WHEN NOT MATCHED THEN
					  INSERT(COMM_MLG_ID   
							,MLG_CODE      
							,MLG_KO     
							,${COMPARE_COLUMN}     
							<include refid="config.cidColumn"></include>
							)
					  VALUES(COMM_MLG_S.NEXTVAL   
							,CS.MLG_CODE      
							,REPLACE(CS.MLG_CODE, '_', ' ')     
							,'1'
							,#{CID}           
							,SYSDATE           
							,#{CIP}           
							,#{MID}           
							,SYSDATE           
							,#{MIP})
							;
								
			END LOOP;
		END;
	</insert>
	
	<!-- 그리드콤보 팝업 -->
	<select id="S_COMM_GRID_COMBO_POPUP" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_GRID_COMBO_POPUP */
		SELECT 'id_' || (ROWNUM-1) AS "id"
			 , A.COMM_GRID_COMBO_POPUP_ID
			 , A.COMM_GRID_DETAIL_ID
			 , A.PARAM_NAME
			 , A.PARAM_VALUE
			 , A.TARGET
			 , A.USE_YN
		  FROM COMM_GRID_COMBO_POPUP A
		 WHERE A.COMM_GRID_DETAIL_ID = #{COMM_GRID_DETAIL_ID}
		 <if test="@prjb.com.util.ComUtil@nvl(USE_YN, '') != ''">
		 	AND A.USE_YN = #{USE_YN}
		 </if>
	</select>
	
	<!-- 그리드컨텍스트메뉴저장 -->
	<insert id="I_COMM_GRID_CONTEXT" parameterType="HashMap" >
		/* I_COMM_GRID_CONTEXT */
		<include refid="config.P_COMM_GRID_CONTEXT">
			<property name="COMM_GRID_MASTER_ID" value="#{COMM_GRID_MASTER_ID}"/>
			<property name="FUNCTION_CODE" value="#{FUNCTION_CODE}"/>
			<property name="USE_YN" value="#{USE_YN}"/>
			<property name="DESCRIPTION" value="#{DESCRIPTION}"/>
			<property name="MID" value="#{MID}"/>
			<property name="MIP" value="#{MIP}"/>
		</include>
	</insert>
	<update id="U_COMM_GRID_CONTEXT" parameterType="HashMap" >
		/* U_COMM_GRID_CONTEXT */
		<include refid="config.P_COMM_GRID_CONTEXT">
			<property name="COMM_GRID_MASTER_ID" value="#{COMM_GRID_MASTER_ID}"/>
			<property name="FUNCTION_CODE" value="#{FUNCTION_CODE}"/>
			<property name="USE_YN" value="#{USE_YN}"/>
			<property name="DESCRIPTION" value="#{DESCRIPTION}"/>
			<property name="MID" value="#{MID}"/>
			<property name="MIP" value="#{MIP}"/>
		</include>
	</update>
	<!-- 그리드별 컨텍스트메뉴 -->
	<select id="S_COMM_GRID_CONTEXT" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_GRID_CONTEXT */
		SELECT 'id_' || (ROWNUM-1) AS "id"
			 , A.DETAIL_CODE AS FUNCTION_CODE
			 , COMM_UTIL_PKG.lang(A.MLG_CODE, #{LANG_CODE}) AS FUNCTION_NAME
		  	 , NVL(B.USE_YN, 0) AS USE_YN
		  	 , B.DESCRIPTION
		  	 , B.COMM_GRID_CONTEXT_ID
		  	 , #{COMM_GRID_MASTER_ID} AS COMM_GRID_MASTER_ID
		  FROM COMM_CODE_DETAIL A
		  JOIN COMM_CODE_MASTER A2 ON A.COMM_CODE_MASTER_ID = A2.COMM_CODE_MASTER_ID
	 LEFT JOIN COMM_GRID_CONTEXT B ON A.DETAIL_CODE = B.FUNCTION_CODE AND B.COMM_GRID_MASTER_ID = #{COMM_GRID_MASTER_ID}
		 WHERE A2.SYSTEM_CODE_YN = '1'
		   AND A2.USE_YN = '1'
		   AND A2.MASTER_CODE = 'GRID_CONTEXT'
		 <![CDATA[
		   AND (TO_DATE(A.START_DATE) <= SYSDATE AND NVL(TO_DATE(A.END_DATE), SYSDATE) <= SYSDATE)
		   ]]>
		 ORDER BY A.SEQ
	</select>
	
	<!-- 화면별 그리드 컨텍스트 셋팅데이터 -->
	<select id="S_COMM_GRID_CONTEXT_DATA" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_GRID_CONTEXT_DATA */
		SELECT C.GRID_NAME 
			 , LISTAGG(A.FUNCTION_CODE, ',') WITHIN GROUP(ORDER BY B.SEQ) AS CONTEXT_MENU
		  FROM COMM_GRID_CONTEXT A
	 LEFT JOIN (
	 			 SELECT Y.DETAIL_CODE
	 			 	  , Y.START_DATE
	 			 	  , Y.END_DATE
	 			 	  , Y.SEQ
	 			   FROM COMM_CODE_MASTER Z
	 			   JOIN COMM_CODE_DETAIL Y ON Z.COMM_CODE_MASTER_ID = Y.COMM_CODE_MASTER_ID
	 			  WHERE Z.SYSTEM_CODE_YN = '1'
				    AND Z.USE_YN = '1'
				    AND Z.MASTER_CODE = 'GRID_CONTEXT'
	 			) B ON A.FUNCTION_CODE = B.DETAIL_CODE
	 LEFT JOIN COMM_GRID_MASTER C ON A.COMM_GRID_MASTER_ID = C.COMM_GRID_MASTER_ID
	     WHERE A.USE_YN = '1'
	     <![CDATA[
	       AND (TO_DATE(B.START_DATE) <= SYSDATE AND SYSDATE <= NVL(TO_DATE(B.END_DATE), SYSDATE))
	       ]]>
		   AND A.COMM_GRID_MASTER_ID = #{COMM_GRID_MASTER_ID}
		 GROUP BY C.GRID_NAME 
	</select>
	
	<!-- 화면별 그리드셋팅데이터 -->
	<select id="S_GRID_DATA" resultType="HashMap" parameterType="HashMap" >
		/* S_GRID_DATA */
		SELECT C.GRID_NAME 
			 , C.FILTER_YN 
			 , C.SORT_YN
			 , C.TREE_YN
			 , A.SEQ
			 , A.FIELD
			 , A.MLG_CODE
			 , COMM_UTIL_PKG.lang(A.MLG_CODE, #{LANG_CODE}) AS FIELD_NAME
			 , A.GROUP_MLG_CODE
			 , A.WIDTH
			 , A.TEXT_ALIGN
			 , CASE WHEN A.FIELD_TYPE = 'COMBO' AND A.QUERY_ID IS NULL
			 		THEN 'EDIT'
			 		ELSE A.FIELD_TYPE END AS FIELD_TYPE
			 , A.REQUIRE_YN
			 , A.FIXED_YN
			 , A.USE_YN
			 , A.FOOTER
			 , A.DESCRIPTION
			 , A.QUERY_ID
			 , A.COMM_GRID_DETAIL_ID
			 , B.EDITOR
			 , B.PASTE_YN
		  FROM COMM_GRID_DETAIL A
	 LEFT JOIN (
	 			 SELECT Y.DETAIL_CODE
	 			 	  , Y.START_DATE
	 			 	  , Y.END_DATE
	 			 	  , Y.SEQ
	 			 	  , Y.ATTRIBUTE1 AS EDITOR
	 			 	  , Y.ATTRIBUTE2 AS PASTE_YN
	 			   FROM COMM_CODE_MASTER Z
	 			   JOIN COMM_CODE_DETAIL Y ON Z.COMM_CODE_MASTER_ID = Y.COMM_CODE_MASTER_ID
	 			  WHERE Z.SYSTEM_CODE_YN = '1'
				    AND Z.USE_YN = '1'
				    AND Z.MASTER_CODE = 'GRID_FIELD_TYPE'
				    <![CDATA[
					 AND (TO_DATE(Y.START_DATE) <= SYSDATE AND SYSDATE <= NVL(TO_DATE(Y.END_DATE), SYSDATE))
					 ]]>
	 			) B ON CASE WHEN A.FIELD_TYPE = 'COMBO' AND A.QUERY_ID IS NULL
					 		THEN 'EDIT'
					 		ELSE A.FIELD_TYPE END = B.DETAIL_CODE
	 LEFT JOIN COMM_GRID_MASTER C ON A.COMM_GRID_MASTER_ID = C.COMM_GRID_MASTER_ID
		 WHERE C.COMM_GRID_MASTER_ID = #{COMM_GRID_MASTER_ID}
		   AND A.USE_YN = '1'
		 ORDER BY A.SEQ
	</select>
	
	<!-- 그리드 관리 상세그리드 조회 -->
	<select id="S_COMM_GRID_DETAIL" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_GRID_DETAIL */
		SELECT 'id_' || (ROWNUM-1) AS "id"
			 , A.COMM_GRID_DETAIL_ID
			 , A.COMM_GRID_MASTER_ID
			 , A.SEQ
			 , A.FIELD
			 , A.MLG_CODE
			 , A.GROUP_MLG_CODE
			 , A.WIDTH
			 , A.TEXT_ALIGN
			 , A.FIELD_TYPE
			 , A.REQUIRE_YN
			 , A.FIXED_YN
			 , A.USE_YN
			 , A.FOOTER
			 , A.DESCRIPTION
			 , A.QUERY_ID
		  FROM COMM_GRID_DETAIL A
		 WHERE A.COMM_GRID_MASTER_ID = #{COMM_GRID_MASTER_ID}
		 ORDER BY A.SEQ
	</select>
	
	<!-- 그리드 관리 마스터그리드 조회 -->
	<select id="S_COMM_GRID_MASTER" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_GRID_MASTER */
		SELECT 'id_' || (ROWNUM-1) AS "id"
			 , A.COMM_GRID_MASTER_ID 
			 , A.MENU_CODE
			 , COMM_UTIL_PKG.lang(B.MLG_CODE, #{LANG_CODE}) AS MENU_NAME
			 , A.GRID_NAME 
			 , A.FILTER_YN 
			 , A.DESCRIPTION
			 , A.SORT_YN
			 , A.TREE_YN
		  FROM COMM_GRID_MASTER A
	 LEFT JOIN COMM_MENU B ON A.MENU_CODE = B.MENU_CODE
		 WHERE A.MENU_CODE = #{MENU_CODE}
	</select>
	
	<!-- 그리드 관리 메뉴 조회 -->
	<select id="S_GRID_MANAGE_MENU" resultType="HashMap" parameterType="HashMap" >
		/* S_GRID_MANAGE_MENU */
		SELECT 'id_' || (ROWNUM-1) AS "id"
			 , LEVEL-1 AS "indent"
			 , SUBSTR( SYS_CONNECT_BY_PATH(ROWNUM, '_')
	 		 		 , (INSTR(SYS_CONNECT_BY_PATH(ROWNUM, '_'), '_', -1, 2)+1)
	 		 		 , (INSTR(SYS_CONNECT_BY_PATH(ROWNUM, '_'), '_', -1) - (INSTR(SYS_CONNECT_BY_PATH(ROWNUM, '_'), '_', -1, 2)+1)) ) -1	AS "parent"
			 , A.COMM_MENU_ID
			 , A.MENU_CODE
			 , COMM_UTIL_PKG.lang(A.MLG_CODE, #{LANG_CODE}) AS MENU_NAME
		  FROM COMM_MENU A
     	 WHERE A.USE_YN = '1'
		 START WITH A.UP_MENU_CODE IS null 
		CONNECT BY PRIOR A.MENU_CODE = A.UP_MENU_CODE
		ORDER SIBLINGS BY A.SEQ
	</select>
	
	<!-- 공통코드 상세 조회 -->
	<select id="S_COMM_CODE_DETAIL" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_CODE_DETAIL */
		SELECT 'id_' || (ROWNUM-1) AS "id"
			 , A.COMM_CODE_DETAIL_ID 
			 , A.COMM_CODE_MASTER_ID 
       		 , A.MASTER_CODE			 
			 , A.DETAIL_CODE 
			 , A.MLG_CODE
			 , COMM_UTIL_PKG.lang(A.MLG_CODE, #{LANG_CODE}) AS CODE_NAME
			 , A.START_DATE
			 , A.END_DATE
			 , A.SEQ
			 , A.DESCRIPTION 
			 , A.ATTRIBUTE1 
			 , A.ATTRIBUTE2 
			 , A.ATTRIBUTE3 
			 , A.ATTRIBUTE4 
			 , A.ATTRIBUTE5
			 , A.ATTRIBUTE6
			 , A.ATTRIBUTE7
			 , A.ATTRIBUTE8
			 , A.ATTRIBUTE9
			 , A.ATTRIBUTE10
		  FROM COMM_CODE_DETAIL A
		 WHERE A.COMM_CODE_MASTER_ID = #{COMM_CODE_MASTER_ID}
		 ORDER BY A.SEQ ASC
	</select>
	
	<!-- 공통코드 마스터 조회 -->
	<select id="S_COMM_CODE_MASTER" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_CODE_MASTER */
		SELECT 'id_' || (ROWNUM-1) AS "id"
			 , A.COMM_CODE_MASTER_ID
			 , A.MASTER_CODE 
			 , A.MLG_CODE
			 , COMM_UTIL_PKG.lang(A.MLG_CODE, #{LANG_CODE}) AS CODE_NAME
			 , NVL(A.USE_YN, '0') AS USE_YN
			 , NVL(A.SYSTEM_CODE_YN, '0') AS SYSTEM_CODE_YN
			 , A.DESCRIPTION 
			 , A.ATTRIBUTE1 
			 , A.ATTRIBUTE2 
			 , A.ATTRIBUTE3 
			 , A.ATTRIBUTE4 
			 , A.ATTRIBUTE5
			 , A.ATTRIBUTE6
			 , A.ATTRIBUTE7
			 , A.ATTRIBUTE8
			 , A.ATTRIBUTE9
			 , A.ATTRIBUTE10
		  FROM COMM_CODE_MASTER A
		 WHERE A.COMM_CODE_MASTER_ID = A.COMM_CODE_MASTER_ID
		 <if test="@prjb.com.util.ComUtil@nvl(p_masterCode, '') != ''">
		 	<![CDATA[
		 	AND ( instr(A.MASTER_CODE, #{p_masterCode}) > 0 OR instr(COMM_UTIL_PKG.lang(A.MLG_CODE, #{LANG_CODE}), #{p_masterCode}) > 0 )
		 	]]> 
		 </if>
		 ORDER BY A.COMM_CODE_MASTER_ID DESC
	</select>
	
	<!-- 메뉴 URL 조회 -->
	<select id="S_MENU_URL" resultType="HashMap" parameterType="HashMap" >
		/* S_MENU_URL */
		SELECT A.MENU_URL
			 , A.COMM_MENU_ID
		  FROM COMM_MENU A
		 WHERE A.USE_YN = '1'
		   AND A.MENU_CODE = #{MENU_CODE}
		   AND #{CID} = #{CID} 
	</select>
	
	<!-- 로그인한 계정의 메뉴 조회 -->
	<select id="S_MY_MENU" resultType="HashMap" parameterType="HashMap" >
		/* S_MY_MENU */
		SELECT LEVEL-1 AS MENU_DEPTH
			 , SYS_CONNECT_BY_PATH(A.MENU_CODE, '@') AS MENU_PATH
			 , A.COMM_MENU_ID 
			 , A.MENU_CODE 
			 , A.MLG_CODE
			 , A.MENU_URL 
			 , A.UP_MENU_CODE 
			 , A.USE_YN 
			 , A.DESCRIPTION 
			 , A.SEQ
		  FROM COMM_MENU A
		 WHERE A.USE_YN = '1'
		   AND #{CID} = #{CID} 
		 START WITH UP_MENU_CODE IS null 
		CONNECT BY PRIOR MENU_CODE = UP_MENU_CODE
		ORDER SIBLINGS BY SEQ
	</select>
	
	<!-- 메뉴 조회 -->
	<select id="S_COMM_MENU" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_MENU */
		SELECT 'id_' || (ROWNUM-1) AS "id"
			 , LEVEL-1 AS "indent"
			 , SUBSTR( SYS_CONNECT_BY_PATH(ROWNUM, '_')
	 		 		 , (INSTR(SYS_CONNECT_BY_PATH(ROWNUM, '_'), '_', -1, 2)+1)
	 		 		 , (INSTR(SYS_CONNECT_BY_PATH(ROWNUM, '_'), '_', -1) - (INSTR(SYS_CONNECT_BY_PATH(ROWNUM, '_'), '_', -1, 2)+1)) ) -1	AS "parent"
			 , COMM_MENU_ID 
			 , MENU_CODE 
			 , MENU_CODE as TREE_VIEW
			 , MLG_CODE
			 , MENU_URL 
			 , UP_MENU_CODE 
			 , NVL(USE_YN, '0')	AS USE_YN 
			 , DESCRIPTION 
			 , SEQ
		  FROM COMM_MENU
		 START WITH UP_MENU_CODE IS null 
		CONNECT BY PRIOR MENU_CODE = UP_MENU_CODE
		ORDER SIBLINGS BY SEQ
	</select>
	
	<!-- 메뉴,코드,메시지 다국어 조회 -->
	<select id="S_COMM_MLG_TYPE" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_MLG_TYPE */
		SELECT COMM_MLG_ID
		 	 , MLG_CODE
		 	 , MLG_KO
		 	 , MLG_EN
		 	 , NVL(MSG_YN, '0') 	AS MSG_YN
		 	 , NVL(MENU_YN, '0')	AS MENU_YN
		 	 , NVL(CODE_YN, '0')	AS CODE_YN
		 	 , NVL(GRID_YN, '0')	AS GRID_YN
		 	 , NVL(FUNCTION_YN, '0')	AS FUNCTION_YN
		 	 , DESCRIPTION
		  FROM COMM_MLG
		 WHERE COMM_MLG_ID = COMM_MLG_ID
		 <if test="@prjb.com.util.ComUtil@nvl(MENU_YN, '') != ''">
		 	AND MENU_YN = #{MENU_YN}
		 </if>
		 <if test="@prjb.com.util.ComUtil@nvl(MSG_YN, '') != ''">
		 	AND MSG_YN = #{MSG_YN}
		 </if>
		 <if test="@prjb.com.util.ComUtil@nvl(CODE_YN, '') != ''">
		 	AND CODE_YN = #{CODE_YN}
		 </if>
		 <if test="@prjb.com.util.ComUtil@nvl(GRID_YN, '') != ''">
		 	AND GRID_YN = #{GRID_YN}
		 </if>
		 <if test="@prjb.com.util.ComUtil@nvl(FUNCTION_YN, '') != ''">
		 	AND FUNCTION_YN = #{FUNCTION_YN}
		 </if>
		 ORDER BY MLG_KO
	</select>
	
	<!-- 다국어 조회 -->
	<select id="S_COMM_MLG" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_MLG */
		SELECT 'id_' || (ROWNUM-1) AS "id"
			 , COMM_MLG_ID
		 	 , MLG_CODE
		 	 , MLG_KO
		 	 , MLG_EN
		 	 , NVL(MSG_YN, '0') 	AS MSG_YN
		 	 , NVL(MENU_YN, '0')	AS MENU_YN
		 	 , NVL(CODE_YN, '0')	AS CODE_YN
		 	 , NVL(GRID_YN, '0')	AS GRID_YN
		 	 , NVL(FUNCTION_YN, '0')	AS FUNCTION_YN
		 	 , DESCRIPTION
		  FROM COMM_MLG
		  WHERE COMM_MLG_ID = COMM_MLG_ID
		 <if test="@prjb.com.util.ComUtil@nvl(p_mlgCode, '') != ''">
		 	<![CDATA[
		 	AND ( instr(MLG_CODE, #{p_mlgCode}) > 0 OR instr(MLG_KO, #{p_mlgCode}) > 0 )
		 	]]> 
		 </if>
		 ORDER BY COMM_MLG_ID DESC
	</select>
	
	<!-- 공통쿼리사용을 위한 테이블컬럼조회 -->
	<select id="S_COLUMNS" resultType="HashMap" parameterType="HashMap" >
		/* S_COLUMNS */
		SELECT COLUMN_NAME
		  FROM COLS 
		 WHERE TABLE_NAME = #{TALBE_NAME}
		 ORDER BY COLUMN_ID ASC
	</select>
	
	<!-- 공통INSERT -->
	<insert id="I_COMM_QUERY" parameterType="HashMap" >
		/* I_COMM_QUERY */
		INSERT INTO ${TALBE_NAME}
			<foreach collection="TABLE_LAYOUT" item="item" open="(" separator="," close=")" >
					${item.COLUMN_NAME}
			</foreach>
			VALUES
			<foreach collection="TABLE_LAYOUT" item="item" open="(" separator="," close=")">
				<choose>
					<when test="item.COLUMN_NAME == TALBE_NAME+'_ID'">
					${TALBE_NAME}_S.NEXTVAL
					</when>
					<when test="item.COLUMN_NAME == 'CDT' or item.COLUMN_NAME == 'MDT'">
					SYSDATE
					</when>
					<otherwise>
					#{item.COLUMN_VALUE}
					</otherwise>
				</choose>	
			</foreach>
	</insert>
	
	<!-- 공통UPDATE -->
	<update id="U_COMM_QUERY" parameterType="HashMap" >
		/* U_COMM_QUERY */
		UPDATE ${TALBE_NAME}
		   SET 
		   <foreach collection="TABLE_LAYOUT" item="item" separator=",">
				<choose>
					<when test="item.COLUMN_NAME == TALBE_NAME+'_ID' or item.COLUMN_NAME == 'CDT' or item.COLUMN_NAME == 'CID'or item.COLUMN_NAME == 'CIP'">
					${item.COLUMN_NAME} = ${item.COLUMN_NAME}
					</when>
					<when test="item.COLUMN_NAME == 'MDT'">
					${item.COLUMN_NAME} = SYSDATE
					</when>
					<otherwise>
					${item.COLUMN_NAME} = #{item.COLUMN_VALUE}
					</otherwise>
				</choose>	
			</foreach>
		 WHERE ${WHERE_QUERY}
	</update>
	
	<!-- 공통DELETE -->
	<delete id="D_COMM_QUERY" parameterType="HashMap" >
		/* D_COMM_QUERY */
		DELETE
		  FROM ${TALBE_NAME}
		 WHERE ${WHERE_QUERY}
	</delete>
	
	<!-- 각사용자별 암호화salt조회 -->
	<select id="S_SALT" resultType="HashMap" parameterType="HashMap" >
		/* S_SALT */
		SELECT A.SALT
		  FROM COMM_USER_SALT A
		  JOIN COMM_USER B
		    ON A.COMM_USER_ID = B.COMM_USER_ID
		 WHERE B.LOGIN_ID = #{LOGIN_ID}	 
	</select>
	
	<!-- 로그인 -->
	<select id="S_LOGIN" resultType="HashMap" parameterType="HashMap" >
		/* S_LOGIN */
		SELECT A.COMM_USER_ID
			 , A.LOGIN_ID
		 	 , A.USER_NAME
		 	 , NVL(A.USE_YN, '0')	AS USE_YN
		 	 , TO_CHAR(A.CDT, 'YYYY-MM-DD') as CDT
		  FROM COMM_USER A
		 WHERE A.USE_YN = #{USE_YN}
		   AND A.LOGIN_ID = #{LOGIN_ID}
		   AND A.PWD = #{PWD}
	</select>
	
	<!-- 사용자생성(회원가입) -->
	<insert id="I_COMM_USER" parameterType="HashMap" >
		/* I_COMM_USER */
		<selectKey resultType="HashMap" keyProperty="COMM_USER_ID" order="BEFORE">
			SELECT COMM_USER_S.NEXTVAL as COMM_USER_ID
			  FROM DUAL
		</selectKey>
		INSERT INTO COMM_USER(COMM_USER_ID 
							, LOGIN_ID 
							, PWD 
							, USER_NAME 
							, USE_YN
							<include refid="config.cidColumn"></include>
							)
					  VALUES( #{COMM_USER_ID}
							, #{LOGIN_ID}
							, #{PWD}
							, #{USER_NAME}
							, '1'
							, #{COMM_USER_ID}
							, SYSDATE
							, #{CIP}
							, #{COMM_USER_ID}
							, SYSDATE
							, #{MIP}
							)
	</insert>
	
	<!-- 패스워드암호화 salt생성 -->
	<insert id="I_SALT" parameterType="HashMap" >
		/* I_SALT */
		<selectKey resultType="HashMap" keyProperty="COMM_USER_SALT_ID" order="BEFORE">
			SELECT COMM_USER_SALT_S.NEXTVAL as "COMM_USER_SALT_ID"
			  FROM DUAL
		</selectKey>
		INSERT INTO COMM_USER_SALT(COMM_USER_SALT_ID
								 , COMM_USER_ID 
								 , SALT
								 <include refid="config.cidColumn"></include>
								  )
						   VALUES( #{COMM_USER_SALT_ID} 
								 , #{COMM_USER_ID}
								 , #{SALT}
								 , #{COMM_USER_ID} 
								 , SYSDATE
								 , #{CIP}
								 , #{COMM_USER_ID} 
								 , SYSDATE
								 , #{MIP}
								 )
	</insert>
	
	<!-- 회원가입 시 초기 그룹권한부여 -->
	<insert id="I_ADD_AUTH_GROUP_USER" parameterType="HashMap" >
		/* I_ADD_AUTH_GROUP_USER */
		INSERT INTO COMM_AUTH_GROUP_USER(COMM_AUTH_GROUP_USER_ID
										,COMM_AUTH_GROUP_ID
										,COMM_USER_ID
										,DESCRIPTION
										<include refid="config.cidColumn"></include>
										)
								  VALUES( COMM_AUTH_GROUP_USER_S.NEXTVAL
										, 2 --일반사용자그룹ID
										, #{COMM_USER_ID}
										, '회원가입'
										, #{COMM_USER_ID}
										, SYSDATE
										, #{CIP}
										, #{COMM_USER_ID}
										, SYSDATE
										, #{MIP}
										)
	</insert>
	
	<!-- 사용자관리 조회 -->
	<select id="S_COMM_USER" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_USER */
		SELECT 'id_' || (ROWNUM-1) 			AS "id"
			 , A.LOGIN_ID					AS LOGIN_ID
			 , A.USER_NAME					AS USER_NAME
			 , A.USE_YN						AS USE_YN
			 , A.LOCK_YN					AS LOCK_YN
			 , TO_CHAR(A.CDT, 'YYYY-MM-DD')	AS CDT
			 , A.COMM_USER_ID				AS COMM_USER_ID
		  FROM COMM_USER A
		 WHERE A.COMM_USER_ID = A.COMM_USER_ID
		 <if test="@prjb.com.util.ComUtil@nvl(p_loginId, '') != ''">
		 	<![CDATA[
		 	AND ( instr(A.LOGIN_ID, #{p_loginId}) > 0 OR instr(A.USER_NAME, #{p_loginId}) > 0 )
		 	]]> 
		 </if>
		 ORDER BY A.CDT DESC
	</select>
	<!-- 사용자관리 수정 -->
	<update id="U_COMM_USER" parameterType="HashMap" >
		/* U_COMM_USER */
		UPDATE COMM_USER
		   SET USE_YN = #{USE_YN}
		     , LOCK_YN = #{LOCK_YN}
		   	 , MID = #{MID}
		   	 , MDT = SYSDATE
		   	 , MIP = #{MIP}
		 WHERE COMM_USER_ID = #{COMM_USER_ID}
	</update>
</mapper>