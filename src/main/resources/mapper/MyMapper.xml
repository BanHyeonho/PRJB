<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="my">

	<!-- 파일관리 파일 순서 조회 -->
	<select id="S_MY_FILE_MANAGE_CNT" resultType="HashMap" parameterType="HashMap" >
		/* S_MY_FILE_MANAGE_CNT */
	    SELECT NVL(MAX(A.SEQ), 0) AS SEQ
	      FROM MY_FILE_MANAGE A
	     WHERE A.COMM_USER_ID = #{COMM_USER_ID}
	     <choose>
	     	<when test="@org.apache.commons.lang3.StringUtils@isBlank(PARENT_KEY_ID)">
	     		AND A.PARENT_KEY_ID IS NULL
	     	</when>
	     	<otherwise>
	     		AND A.PARENT_KEY_ID = #{PARENT_KEY_ID}
	     	</otherwise>
	     </choose>
	</select>
	
	<!-- 파일관리 파일 미리보기 목록 조회 -->
	<select id="S_FILE_MANAGE_PREVIEW_LIST" resultType="HashMap" parameterType="HashMap" >
		/* S_FILE_MANAGE_PREVIEW_LIST */
	    SELECT A.MY_FILE_MANAGE_ID
			 , A.SEQ
			 , A.KEY_ID
			 , A.TITLE
			 , A.TYPE_CODE
			 , A.PARENT_KEY_ID
			 , A.SHOW_YN
			 , A.DESCRIPTION
			 , B.COMM_FILE_ID 		AS FILE_ID
			 , B.RANDOM_KEY
			 , B.FILE_EXTENSION
			 , COMM_UTIL_PKG.COMM_CODE_ATTR('FILE_EXTENSION', UPPER(B.FILE_EXTENSION), 'ATTRIBUTE1', 'KO') AS FILE_EXTENSION_DIVISION
	      FROM MY_FILE_MANAGE A
     LEFT JOIN COMM_FILE B ON (B.MODULE_CODE = 'MY' AND B.MENU_URL = 'fileManage' AND B.GROUP_ID = A.MY_FILE_MANAGE_ID)
	     WHERE A.COMM_USER_ID = #{CID}
	       AND COMM_UTIL_PKG.COMM_CODE_ATTR('FILE_EXTENSION', UPPER(B.FILE_EXTENSION), 'ATTRIBUTE2', 'KO') = '1'
	     <choose>
	     	<when test="@org.apache.commons.lang3.StringUtils@isBlank(PARENT_KEY_ID)">
	     		AND A.PARENT_KEY_ID IS NULL
	     	</when>
	     	<otherwise>
	     		AND A.PARENT_KEY_ID = #{PARENT_KEY_ID}
	     	</otherwise>
	     </choose>
		 ORDER BY A.SEQ
	</select>
	
	<!-- 파일관리 파일 조회 -->
	<select id="S_FILE_MANAGE" resultType="HashMap" parameterType="HashMap" >
		/* S_FILE_MANAGE */
	    SELECT A.MY_FILE_MANAGE_ID
			 , A.SEQ
			 , A.KEY_ID
			 , A.TITLE
			 , A.TYPE_CODE
			 , A.PARENT_KEY_ID
			 , A.SHOW_YN
			 , A.DESCRIPTION
			 , B.COMM_FILE_ID AS FILE_ID
			 , B.RANDOM_KEY
			 , B.FILE_EXTENSION
	      FROM MY_FILE_MANAGE A
     LEFT JOIN COMM_FILE B ON (B.MODULE_CODE = 'MY' AND B.MENU_URL = 'fileManage' AND B.GROUP_ID = A.MY_FILE_MANAGE_ID)
	     WHERE A.COMM_USER_ID = #{CID}
	       AND A.SHOW_YN = '1'
	     <choose>
	     	<when test="@org.apache.commons.lang3.StringUtils@isBlank(PARENT_KEY_ID)">
	     		AND A.PARENT_KEY_ID IS NULL
	     	</when>
	     	<otherwise>
	     		AND A.PARENT_KEY_ID = #{PARENT_KEY_ID}
	     	</otherwise>
	     </choose>
		 ORDER BY A.SEQ
	</select>
	
	<!-- 파일관리 폴더 트리 -파일명 조회시 항목조회 -->
	<select id="S_FILE_MANAGE_TREE_ITEM" resultType="HashMap" parameterType="HashMap" >
		/* S_FILE_MANAGE_TREE_ITEM */
		SELECT  A.KEY_STR AS KEY_STR
          FROM (
            SELECT SYS_CONNECT_BY_PATH(A.TITLE, '/') AS TITLE_STR
                 , SYS_CONNECT_BY_PATH(A.KEY_ID, '/') AS KEY_STR
              FROM MY_FILE_MANAGE A
             LEFT JOIN COMM_FILE B ON (B.MODULE_CODE = 'MY' AND B.MENU_URL = 'fileManage' AND B.GROUP_ID = A.MY_FILE_MANAGE_ID)
                 WHERE A.COMM_USER_ID = #{CID}
                 <if test="@org.apache.commons.lang3.StringUtils@isBlank(SHOW_YN)">
				 	AND A.SHOW_YN = '1'
				 </if>
            START WITH A.PARENT_KEY_ID IS null 
               CONNECT BY PRIOR A.KEY_ID = A.PARENT_KEY_ID
             ) A
          WHERE UPPER(A.TITLE_STR) LIKE '%' || UPPER( #{TITLE_STR} ) || '%'
          
	</select>
	<!-- 파일관리 폴더 트리 조회 -->
	<select id="S_FILE_MANAGE_TREE" resultType="HashMap" parameterType="HashMap" >
		/* S_FILE_MANAGE_TREE */
	    SELECT A.MY_FILE_MANAGE_ID
			 , A.SEQ
			 , A.KEY_ID
			 , A.TITLE
			 , A.TYPE_CODE
			 , B.COMM_FILE_ID
			 , A.PARENT_KEY_ID
			 , A.SHOW_YN
			 , A.DESCRIPTION
			 , (SELECT COUNT(0)
		          FROM MY_FILE_MANAGE Z
		         WHERE Z.PARENT_KEY_ID = A.KEY_ID
		           AND Z.COMM_USER_ID = A.COMM_USER_ID
		           <if test="@org.apache.commons.lang3.StringUtils@isBlank(SHOW_YN)">
					 	AND Z.SHOW_YN = '1'
				   </if>
		         ) 											AS CHILD_CNT
	      FROM MY_FILE_MANAGE A
     LEFT JOIN COMM_FILE B ON (B.MODULE_CODE = 'MY' AND B.MENU_URL = 'fileManage' AND B.GROUP_ID = A.MY_FILE_MANAGE_ID)
	     WHERE A.COMM_USER_ID = #{CID}
	     <if test="@org.apache.commons.lang3.StringUtils@isBlank(SHOW_YN)">
		 	AND A.SHOW_YN = '1'
		 </if>
		 <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(FILE_LIST)">
		 	AND EXISTS (
		 	         SELECT Z.COLUMN_VALUE
					   FROM COMM_UTIL_PKG.split(#{FILE_LIST}, '/') Z
					  WHERE Z.COLUMN_VALUE IS NOT NULL
					    AND Z.COLUMN_VALUE = A.KEY_ID
		 				)
		 </if>
	     START WITH A.PARENT_KEY_ID IS null 
	   CONNECT BY PRIOR A.KEY_ID = A.PARENT_KEY_ID
		 ORDER SIBLINGS BY A.SEQ
	</select>
	
	<!-- 파일관리 폴더 트리 삭제 -->
	<delete id="D_FILE_MANAGE_TREE" parameterType="HashMap" >
		/* D_FILE_MANAGE_TREE */
		DELETE
		  FROM MY_FILE_MANAGE
		 WHERE COMM_USER_ID = #{COMM_USER_ID}
		   AND KEY_ID = #{KEY_ID}
	</delete>
	<!-- 파일관리 폴더 트리 수정 -->
	<update id="U_FILE_MANAGE_TREE" parameterType="HashMap" >
		/* U_FILE_MANAGE_TREE */
		MERGE INTO MY_FILE_MANAGE A
			 USING DUAL
			    ON (A.COMM_USER_ID = #{COMM_USER_ID} 
			   AND  A.KEY_ID = #{KEY_ID})
			  WHEN MATCHED THEN
			  UPDATE SET A.TITLE = #{TITLE}
			  		   , A.SEQ = #{SEQ}
			  		   , A.PARENT_KEY_ID = #{PARENT_KEY_ID}
			  		   , A.SHOW_YN = #{SHOW_YN}
			  		   , A.MID = #{MID}
			  		   , A.MDT = SYSDATE
			  		   , A.MIP = #{MIP}
			  WHEN NOT MATCHED THEN
			  INSERT(MY_FILE_MANAGE_ID
		          , COMM_USER_ID
		          , SEQ
		          , KEY_ID
		          , TITLE
		          , TYPE_CODE
		          , PARENT_KEY_ID
		          , SHOW_YN
		          <include refid="config.cidColumn"></include>
		          )
		       VALUES(MY_FILE_MANAGE_S.NEXTVAL
		          , #{COMM_USER_ID}
		          , #{SEQ}
		          , #{KEY_ID}
		          , #{TITLE}
		          , #{TYPE_CODE}
		          , #{PARENT_KEY_ID}
		          , #{SHOW_YN}
		          , #{MID}
		          , SYSDATE
		          , #{MIP}
		          , #{MID}
		          , SYSDATE    
		          , #{MIP})
	</update>
	
	<!-- 파일관리 폴더 트리 추가(파일) -->
	<insert id="I_FILE_MANAGE_TREE" parameterType="HashMap" >
		/* I_FILE_MANAGE_TREE */
		<selectKey resultType="HashMap" keyProperty="MY_FILE_MANAGE_ID" order="BEFORE">
			SELECT MY_FILE_MANAGE_S.NEXTVAL as MY_FILE_MANAGE_ID
			  FROM DUAL
		</selectKey>
		INSERT INTO MY_FILE_MANAGE(MY_FILE_MANAGE_ID
						          , COMM_USER_ID
						          , SEQ
						          , KEY_ID
						          , TITLE
						          , TYPE_CODE
						          , PARENT_KEY_ID
						          , SHOW_YN
						          <include refid="config.cidColumn"></include>
							)
					  VALUES(#{MY_FILE_MANAGE_ID}
				          , #{COMM_USER_ID}
				          , #{SEQ}
				          , #{KEY_ID}
				          , #{TITLE}
				          , 'FILE'
				          , #{PARENT_KEY_ID}
				          , '1'
				          , #{CID}
				          , SYSDATE
				          , #{CIP}
				          , #{CID}
				          , SYSDATE    
				          , #{CIP})
	</insert>
	
	<!-- 나의정보 조회 -->
	<select id="S_MY_PRIVACY" resultType="HashMap" parameterType="HashMap" resultMap="config.BlobMap">
		/* S_MY_PRIVACY */
	    SELECT A.LOGIN_ID
	    	 , A.USER_NAME
	    	 , A.EMAIL
	    	 , B.NICKNAME
	    	 , B.PROFILE_PICTURE
	    	 , TO_CHAR(A.CDT, 'YYYY-MM-DD HH:MI:SS')				AS REGIST_DATE
	    	 , NVL(TO_CHAR(B.MDT, 'YYYY-MM-DD HH:MI:SS'), '-')		AS MODIFY_DATE
	    	 , CASE WHEN A.PWD2 IS NULL
	    	 		THEN '0'
	    	 		ELSE '1'
	    	 		 END											AS PWD2_YN	    	 
	      FROM COMM_USER A
     LEFT JOIN MY_PRIVACY B ON A.COMM_USER_ID = B.COMM_USER_ID
         WHERE A.COMM_USER_ID = #{COMM_USER_ID}
	</select>
	
	<!-- 나의정보 수정 -->
	<update id="U_MY_PRIVACY" parameterType="HashMap">
		/* U_MY_PRIVACY */
  		MERGE INTO MY_PRIVACY A
  			 USING DUAL
  			    ON (A.COMM_USER_ID = #{COMM_USER_ID})
  			  WHEN MATCHED THEN
  			UPDATE SET PROFILE_PICTURE	= #{PROFILE_PICTURE}
  					 , NICKNAME			= #{NICKNAME}
  					 , MID				= #{MID}
  					 , MDT				= SYSDATE
  					 , MIP				= #{MIP}
  			  WHEN NOT MATCHED THEN
  			INSERT ( MY_PRIVACY_ID  
				   , COMM_USER_ID   
				   , PROFILE_PICTURE
				   , NICKNAME       
  					<include refid="config.cidColumn"></include>)
  			VALUES ( MY_PRIVACY_S.NEXTVAL
				   , #{COMM_USER_ID}
				   , #{PROFILE_PICTURE}
				   , #{NICKNAME}
  				   , #{CID}
		           , SYSDATE
		           , #{CIP}
		           , #{MID}
		           , SYSDATE    
		           , #{MIP})
	</update>
	
	<!-- 프로필 사진 삭제 -->
	<update id="U_REMOVE_PROFILE" parameterType="HashMap">
		/* U_REMOVE_PROFILE */
  		MERGE INTO MY_PRIVACY A
  			 USING DUAL
  			    ON (A.COMM_USER_ID = #{COMM_USER_ID})
  			  WHEN MATCHED THEN
  			UPDATE SET PROFILE_PICTURE	= NULL
  					 , MID				= #{MID}
  					 , MDT				= SYSDATE
  					 , MIP				= #{MIP}
  			  WHEN NOT MATCHED THEN
  			INSERT ( MY_PRIVACY_ID  
				   , COMM_USER_ID   
				   , PROFILE_PICTURE       
  					<include refid="config.cidColumn"></include>)
  			VALUES ( MY_PRIVACY_S.NEXTVAL
				   , #{COMM_USER_ID}
				   , #{PROFILE_PICTURE}
  				   , #{CID}
		           , SYSDATE
		           , #{CIP}
		           , #{MID}
		           , SYSDATE    
		           , #{MIP})
	</update>
	
	<!-- 메모장 마스터 조회 -->
	<select id="S_MY_NOTE_MASTER" resultType="HashMap" parameterType="HashMap" >
		/* S_MY_NOTE_MASTER */
		SELECT 'id_' || (ROWNUM-1) AS "id"
	         , A.MY_NOTE_MASTER_ID
			 , NVL(A.SEQ, ROWNUM) 		AS SEQ
			 , A.COVER_TITLE
			 , A.COMM_USER_ID
      	  FROM MY_NOTE_MASTER A
      	 WHERE A.COMM_USER_ID = #{COMM_USER_ID}
      	 <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(searchParam1)">
      	   AND (
      	   		A.COVER_TITLE LIKE '%' || #{searchParam1} || '%'
      	   		OR
      	   		EXISTS(
      	   			SELECT Z.MY_NOTE_DETAIL_ID
      	   			  FROM MY_NOTE_DETAIL Z
      	   			 WHERE (A.MY_NOTE_MASTER_ID = Z.MY_NOTE_MASTER_ID AND A.COMM_USER_ID = #{COMM_USER_ID})
      	   			   AND (Z.PAGE_TITLE LIKE '%' || #{searchParam1} || '%'
      	   			   		OR
      	   			   		Z.NOTE_CONTENTS LIKE '%' || #{searchParam1} || '%'
      	   			   		)
      	   				)
      	   		)
      	 </if>
      	 ORDER BY NVL(A.SEQ, ROWNUM) ASC
	</select>
	<!-- 메모장 상세 조회 -->
	<select id="S_MY_NOTE_DETAIL" resultType="HashMap" parameterType="HashMap" >
		/* S_MY_NOTE_DETAIL */
		SELECT 'id_' || (ROWNUM-1) AS "id"
	         , A.MY_NOTE_MASTER_ID
	         , A.MY_NOTE_DETAIL_ID
			 , NVL(A.SEQ, ROWNUM) 		AS SEQ
			 , A.PAGE_TITLE
      	  FROM MY_NOTE_DETAIL A
      	  JOIN MY_NOTE_MASTER B ON (A.MY_NOTE_MASTER_ID = B.MY_NOTE_MASTER_ID AND B.COMM_USER_ID = #{COMM_USER_ID})
      	 WHERE A.MY_NOTE_MASTER_ID = #{MY_NOTE_MASTER_ID}
      	 <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(searchParam1)">
      	   AND (
      	   		A.PAGE_TITLE LIKE '%' || #{searchParam1} || '%'
		   		OR
		   		A.NOTE_CONTENTS LIKE '%' || #{searchParam1} || '%'
      	   		)
      	 </if>
      	 ORDER BY NVL(A.SEQ, ROWNUM) ASC, A.PAGE_TITLE ASC
	</select>
	<!-- 메모장 상세 내용 조회 -->
	<select id="S_MY_NOTE_DETAIL_CONTENT" parameterType="HashMap" resultMap="config.ClobMap">
		/* S_MY_NOTE_DETAIL_CONTENT */
		SELECT A.MY_NOTE_DETAIL_ID
			 , A.NOTE_CONTENTS
			 , A.PAGE_TITLE
			 , NVL(TO_CHAR(A.MDT, 'YYYY-MM-DD HH:MI:SS'), '-') AS MDT
      	  FROM MY_NOTE_DETAIL A
      	  JOIN MY_NOTE_MASTER B ON (A.MY_NOTE_MASTER_ID = B.MY_NOTE_MASTER_ID AND B.COMM_USER_ID = #{COMM_USER_ID})
      	 WHERE A.MY_NOTE_DETAIL_ID = #{MY_NOTE_DETAIL_ID}
	</select>
	
	<!-- 계획등록 - 계뢱목록 조회 -->
	<select id="S_MY_PLAN" parameterType="HashMap" resultMap="config.ClobMap">
		/* S_MY_PLAN */
		SELECT 'id_' || (ROWNUM-1) AS "id"
			 , A.MY_PLAN_ID
			 , A.PLAN_NAME
			 , COMM_UTIL_PKG.DATE_FORMAT(A.START_DATE, 'YYYY-MM-DD')	AS START_DATE
			 , COMM_UTIL_PKG.DATE_FORMAT(A.END_DATE, 'YYYY-MM-DD')		AS END_DATE 
			 , A.APPLY_DAY
			 , A.DESCRIPTION
      	  FROM MY_PLAN A
      	 WHERE A.COMM_USER_ID = #{COMM_USER_ID}
      	 <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(MY_PLAN_ID)">
      	   AND A.MY_PLAN_ID = #{MY_PLAN_ID}
      	 </if>
      	 <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(SEARCH_DATE)">
      	 	<![CDATA[
      	   AND TO_NUMBER(A.APPLY_DAY) <= TO_NUMBER(#{SEARCH_DATE})
      	   AND TO_NUMBER(#{SEARCH_DATE}) <= TO_NUMBER(NVL(A.END_DATE, '99991231')) 
      	   ]]>
      	 </if>
      	 ORDER BY A.start_date DESC
	</select>
	<!-- 계획등록 - 계뢱 항목 조회 -->
	<select id="S_MY_PLAN_ITEM" parameterType="HashMap" resultMap="config.ClobMap">
		/* S_MY_PLAN_ITEM */
		SELECT A.ITEM_NAME
			 , A.TARGET
      	  FROM MY_PLAN_ITEM A
      	  JOIN MY_PLAN B ON (A.MY_PLAN_ID = A.MY_PLAN_ID AND B.COMM_USER_ID = #{COMM_USER_ID})
      	 WHERE A.MY_PLAN_ID = #{MY_PLAN_ID}
      	   AND B.MY_PLAN_ID = #{MY_PLAN_ID}
      	 ORDER BY A.MY_PLAN_ITEM_ID ASC
	</select>
	<!-- 계획등록 - 계뢱 항목 등록 -->
	<insert id="I_MY_PLAN_ITEM" parameterType="HashMap" statementType="CALLABLE">
		/* I_MY_PLAN_ITEM */
		DECLARE
		  BEGIN
		  		DELETE
				  FROM MY_PLAN_ITEM
				 WHERE MY_PLAN_ID = #{MY_PLAN_ID}
				 	 ;
				 
				 INSERT INTO MY_PLAN_ITEM(MY_PLAN_ITEM_ID
										, MY_PLAN_ID     
										, ITEM_NAME      
										, TARGET          
										<include refid="config.cidColumn"></include>)
								SELECT MY_PLAN_ITEM_S.NEXTVAL
										, #{MY_PLAN_ID}     
										, A.COLUMN_VALUE      
										, B.COLUMN_VALUE         
										, #{CID}
										, SYSDATE            
										, #{CIP}
										, #{MID}
										, SYSDATE            
										, #{MIP}
								  FROM (
								  		SELECT ROWNUM  			AS IDX
			                                 , COLUMN_VALUE     AS COLUMN_VALUE
			                            FROM TABLE(COMM_UTIL_PKG.SPLIT(#{ITEM_NAME}, '[@;,;@]'))
								  		) A
								  JOIN (
								  		SELECT ROWNUM  			AS IDX
			                                 , COLUMN_VALUE     AS COLUMN_VALUE
			                            FROM TABLE(COMM_UTIL_PKG.SPLIT(#{TARGET}, '[@;,;@]'))
								  		) B ON A.IDX = B.IDX
				  					;
		    END;
	</insert>
	<!-- 계획등록 - 계뢱 삭제-->
	<delete id="D_MY_PLAN_ALL" parameterType="HashMap" statementType="CALLABLE">
		/* D_MY_PLAN_ALL */
		DECLARE
		  BEGIN
		  		DELETE
				  FROM MY_PLAN_ITEM
				 WHERE MY_PLAN_ID = #{MY_PLAN_ID}
				 	 ;
				 	 
				DELETE
				  FROM MY_PLAN
				 WHERE MY_PLAN_ID = #{MY_PLAN_ID}
				 	 ;
		    END;
	</delete>
	
	<!-- 실적등록 - 계뢱/실적 조회 -->
	<select id="S_MY_PLAN_RESULT" parameterType="HashMap" resultMap="config.ClobMap">
		/* S_MY_PLAN_RESULT */
		SELECT 'id_' || (ROWNUM-1) AS "id"
			 , A.THE_DATE
			 , COMM_UTIL_PKG.DATE_FORMAT(A.THE_DATE, 'YYYY-MM-DD') AS THE_DATE_VIEW
		     , A.DAYS
		     , C.ITEM_NAME
		     , C.TARGET
		     , D.RESULT
		     , C.MY_PLAN_ITEM_ID
		  FROM COMM_UTIL_PKG.GET_MONTH(#{SEARCH_DATE}) A
		  JOIN MY_PLAN B      ON (SUBSTR(B.APPLY_DAY, TO_NUMBER(A.DAYS)+1, 1) = '1'
		  					<![CDATA[
		  					  AND TO_NUMBER(B.START_DATE) <= TO_NUMBER(A.THE_DATE) 
		                      AND TO_NUMBER(A.THE_DATE) <= TO_NUMBER(NVL(B.END_DATE, '99991231'))
		                      ]]>		                      
		                      )
		  JOIN MY_PLAN_ITEM C ON (B.MY_PLAN_ID = C.MY_PLAN_ID AND B.COMM_USER_ID = #{COMM_USER_ID})
	 LEFT JOIN MY_PLAN_RESULT D ON (D.COMM_USER_ID = #{COMM_USER_ID} AND C.MY_PLAN_ITEM_ID = D.MY_PLAN_ITEM_ID AND A.THE_DATE = D.THE_DATE)
		 WHERE B.MY_PLAN_ID = #{MY_PLAN_ID}
		   AND C.MY_PLAN_ID = #{MY_PLAN_ID}
		 ORDER BY TO_NUMBER(A.THE_DATE) ASC, C.MY_PLAN_ITEM_ID ASC
	</select>
	<!-- 실적등록 - 계뢱/실적 입력 -->
	<update id="U_MY_PLAN_RESULT" parameterType="HashMap">
		/* U_MY_PLAN_RESULT */
		MERGE INTO MY_PLAN_RESULT A
			 USING DUAL
			    ON (A.COMM_USER_ID = #{COMM_USER_ID} AND A.MY_PLAN_ITEM_ID = #{MY_PLAN_ITEM_ID} AND A.THE_DATE = #{THE_DATE})
			  WHEN MATCHED THEN
			  UPDATE SET A.RESULT = #{RESULT}
			  		   , A.MID = #{MID}
			  		   , A.MDT = SYSDATE
			  		   , A.MIP = #{MIP}
			  WHEN NOT MATCHED THEN
			  INSERT(MY_PLAN_RESULT_ID
			  	   , COMM_USER_ID
			  	   , MY_PLAN_ITEM_ID
			  	   , THE_DATE
			  	   , RESULT
			  	   <include refid="config.cidColumn"></include>)
			  VALUES(MY_PLAN_RESULT_S.NEXTVAL
			  	   , #{COMM_USER_ID}
			  	   , #{MY_PLAN_ITEM_ID}
			  	   , #{THE_DATE}
			  	   , #{RESULT}
			  	   , #{MID}
		           , SYSDATE
		           , #{MIP}
		           , #{MID}
		           , SYSDATE    
		           , #{MIP}
			  	   )
	</update>
	
	<!-- 달력 일정 조회 -->
	<select id="S_CALENDAR_VIEW_LIST" parameterType="HashMap" resultMap="config.ClobMap">
		/* S_CALENDAR_VIEW_LIST */
		SELECT 'MY_PLAN'		AS CAL_TYPE
			 , A.MY_PLAN_ID		AS KEY_ID
			 , A.PLAN_NAME		AS TITLE
		  FROM MY_PLAN A
		 WHERE A.COMM_USER_ID = #{COMM_USER_ID}
		 <![CDATA[
		   AND TO_NUMBER(NVL(A.END_DATE, '99991231')) >= TO_NUMBER(TO_CHAR(LAST_DAY('20220601'), 'YYYYMMDD'))
		   ]]>
		   UNION ALL
		   
		   SELECT 'GOOGLE' 	AS CAL_TYPE
		   		, 9999		AS KEY_ID
		   		, '구글' 	AS TITLE
		     FROM DUAL
		    
		    UNION ALL
		     
		   SELECT 'KAKAO' 	AS CAL_TYPE
		   		, 9999		AS KEY_ID
		   		, '카카오' 	AS TITLE
		     FROM DUAL
	</select>
</mapper>