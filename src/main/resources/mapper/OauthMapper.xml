<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="oauth">

	<!-- 마지막 토큰 조회 -->
	<select id="S_COMM_OAUTH_TOKEN_LAST" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_OAUTH_TOKEN_LAST */
		SELECT MAX(ACCESS_TOKEN) KEEP(DENSE_RANK FIRST ORDER BY (MDT + EXPIRES_IN/(24*60*60)) DESC) AS ACCESS_TOKEN
			 , MAX(REFRESH_TOKEN) KEEP(DENSE_RANK FIRST ORDER BY (MDT + EXPIRES_IN/(24*60*60)) DESC) AS REFRESH_TOKEN
		  FROM COMM_OAUTH_TOKEN
		 WHERE OAUTH_TYPE = #{OAUTH_TYPE}
		   AND SOCIAL_ID = #{SOCIAL_ID}
	</select>
	<!-- 토큰 저장 -->	
	<insert id="I_COMM_OAUTH_TOKEN" parameterType="HashMap">
		/* I_COMM_OAUTH_TOKEN */
		MERGE INTO COMM_OAUTH_TOKEN A
			 USING DUAL
			    ON (A.OAUTH_TYPE = #{OAUTH_TYPE} AND A.ACCESS_TOKEN = #{ACCESS_TOKEN} AND A.REFRESH_TOKEN = #{REFRESH_TOKEN})
			  WHEN MATCHED THEN
			  UPDATE SET A.EXPIRES_IN = #{EXPIRES_IN}
			  		   , A.RE_EXPIRES_IN = #{RE_EXPIRES_IN}
			  		   , A.MDT = SYSDATE
			  		   , A.MIP = #{CIP}
			  WHEN NOT MATCHED THEN
			  INSERT(OAUTH_TYPE   
					,ACCESS_TOKEN 
					,REFRESH_TOKEN
					,EXPIRES_IN   
					,RE_EXPIRES_IN
					,SOCIAL_ID
					,CDT
					,CIP
					,MDT
					,MIP
			  		)
			  VALUES( #{OAUTH_TYPE}
					, #{ACCESS_TOKEN}
					, #{REFRESH_TOKEN}
					, #{EXPIRES_IN}
					, #{RE_EXPIRES_IN}
					, #{SOCIAL_ID}
					, SYSDATE
					, #{CIP}
					, SYSDATE
					, #{CIP}
					)
	</insert>
	<!-- 연결된 간편로그인 연결끊기 -->
	<delete id="D_COMM_OAUTH" parameterType="HashMap" statementType="CALLABLE">
		/* D_COMM_OAUTH */
		DECLARE
		  BEGIN
		  
			DELETE
			  FROM COMM_OAUTH
			 WHERE OAUTH_TYPE = #{OAUTH_TYPE}
			   AND SOCIAL_ID = #{SOCIAL_ID}
			   AND COMM_USER_ID = #{COMM_USER_ID}
			   ;
			   
		   DELETE
		     FROM Comm_Oauth_token
		    WHERE OAUTH_TYPE = #{OAUTH_TYPE}
			  AND SOCIAL_ID = #{SOCIAL_ID}
				;
						    
		  END;
	</delete>

	<!-- 연결된 간편로그인 조회 -->
	<select id="S_MY_SOCIAL" resultType="HashMap" parameterType="HashMap" >
		/* S_MY_SOCIAL */
	    SELECT B.OAUTH_TYPE
	    	 , NVL(A.PWD_USE_YN, '0')	AS PWD_USE_YN
	    	 , B.SOCIAL_ID
	      FROM COMM_USER A
		  JOIN COMM_OAUTH B ON (A.COMM_USER_ID = B.COMM_USER_ID AND B.COMM_USER_ID = #{COMM_USER_ID})
	     WHERE A.COMM_USER_ID = #{COMM_USER_ID}
	       AND A.USE_YN = '1'
	</select>
	<!-- 연결된 계정 조회 -->
	<select id="S_MY_SOCIAL_IDS" resultType="HashMap" parameterType="HashMap" >
		/* S_MY_SOCIAL_IDS */
	    SELECT B.LOGIN_ID
		     , NVL(A.REP_YN, '0') AS REP_YN
		     , A.OAUTH_TYPE
		  FROM COMM_OAUTH A
		  JOIN COMM_USER B ON (A.COMM_USER_ID = B.COMM_USER_ID AND B.USE_YN = '1')
		 WHERE EXISTS (
		          SELECT Y.COMM_OAUTH_ID
		            FROM COMM_USER Z
		            JOIN COMM_OAUTH Y ON (Z.COMM_USER_ID = Y.COMM_USER_ID AND Y.COMM_USER_ID = #{COMM_USER_ID})
		           WHERE Z.COMM_USER_ID = #{COMM_USER_ID}
		             AND Y.SOCIAL_ID = A.SOCIAL_ID
		             AND Z.USE_YN = '1'
		       )
	</select>
	<!-- 연결된 계정 으로 재로그인 -->
	<select id="S_RE_LOGIN" resultType="HashMap" parameterType="HashMap" >
		/* S_RE_LOGIN */
	    SELECT DISTINCT 
	    	   B.COMM_USER_ID
			 , B.LOGIN_ID
		 	 , B.USER_NAME
		 	 , NVL(B.USE_YN, '0')	AS USE_YN
		 	 , TO_CHAR(B.CDT, 'YYYY-MM-DD') as CDT
		  FROM COMM_OAUTH A
		  JOIN COMM_USER B ON (A.COMM_USER_ID = B.COMM_USER_ID AND B.USE_YN = '1')
		 WHERE B.LOGIN_ID = #{LOGIN_ID}
		   AND EXISTS (
		          SELECT Y.COMM_OAUTH_ID
		            FROM COMM_USER Z
		            JOIN COMM_OAUTH Y ON (Z.COMM_USER_ID = Y.COMM_USER_ID AND Y.COMM_USER_ID = #{COMM_USER_ID})
		           WHERE Z.COMM_USER_ID = #{COMM_USER_ID}
		             AND Y.SOCIAL_ID = A.SOCIAL_ID
		             AND Z.USE_YN = '1'
		       )
	</select>
	<!-- 간편로그인 별 대표계정 수정 -->
	<update id="U_MY_SOCIAL_REP_YN" parameterType="HashMap">
		/* U_MY_SOCIAL_REP_YN */
		UPDATE COMM_OAUTH A
	   	   SET A.REP_YN = CASE WHEN A.COMM_USER_ID = (SELECT COMM_USER_ID FROM COMM_USER WHERE LOGIN_ID = #{LOGIN_ID})
		                       THEN '1'
		                       ELSE '0'
		                        END
		     , A.MID = #{MID}
		     , A.MDT = SYSDATE
		     , A.MIP = #{MIP}
		 WHERE A.OAUTH_TYPE = #{OAUTH_TYPE}
		   AND EXISTS (
		          SELECT Y.COMM_OAUTH_ID
		            FROM COMM_USER Z
		            JOIN COMM_OAUTH Y ON (Z.COMM_USER_ID = Y.COMM_USER_ID AND Y.COMM_USER_ID = #{COMM_USER_ID})
		           WHERE Z.COMM_USER_ID = #{COMM_USER_ID}
		             AND Y.SOCIAL_ID = A.SOCIAL_ID
		             AND Z.USE_YN = '1'
		       )
	</update>
	<!-- 간편로그인 가입여부 확인 -->	
	<select id="S_COMM_OAUTH" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_OAUTH */
		SELECT B.COMM_USER_ID
			 , B.LOGIN_ID
		 	 , B.USER_NAME
		 	 , NVL(B.USE_YN, '0')	AS USE_YN
		 	 , TO_CHAR(B.CDT, 'YYYY-MM-DD') as CDT
		  FROM COMM_OAUTH A
		  JOIN COMM_USER B ON (A.OAUTH_TYPE = #{OAUTH_TYPE} AND A.COMM_USER_ID = B.COMM_USER_ID)
		 WHERE A.OAUTH_TYPE = #{OAUTH_TYPE}
		   AND B.USE_YN = '1'
		   AND NVL(A.REP_YN, '1') = '1'		--대표계정여부
		   AND A.SOCIAL_ID = #{SOCIAL_ID}
	</select>
	<!-- 최근 로그인계정 조회 -->	
	<select id="S_COMM_LOGIN_LAST" resultType="HashMap" parameterType="HashMap" >
		/* S_COMM_LOGIN_LAST */
		SELECT MIN(A.COMM_USER_ID) KEEP(DENSE_RANK FIRST ORDER BY A.CDT DESC) AS COMM_USER_ID
          FROM COMM_LOGIN_LOG A
         WHERE EXISTS(
         			SELECT COLUMN_VALUE
                      FROM TABLE(COMM_UTIL_PKG.SPLIT(#{IDS}, ','))
                     WHERE COLUMN_VALUE = A.COMM_USER_ID
         		)
	</select>
	
	<!-- 간편로그인 연동 -->	
	<insert id="I_COMM_OAUTH" parameterType="HashMap">
		/* I_COMM_OAUTH */
		INSERT INTO COMM_OAUTH(COMM_OAUTH_ID
							 , OAUTH_TYPE   
							 , SOCIAL_ID    
							 , COMM_USER_ID
							 <include refid="config.cidColumn"></include>
								)
						VALUES(COMM_OAUTH_S.NEXTVAL
							 , #{OAUTH_TYPE}
							 , #{SOCIAL_ID}
							 , #{COMM_USER_ID}
							 , #{CID}
				          	 , SYSDATE
					         , #{CIP}
					         , #{CID}
					         , SYSDATE    
					         , #{CIP}        
							)
	</insert>
	
</mapper>